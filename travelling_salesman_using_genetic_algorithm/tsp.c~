/***************************************************************************
programmer1:Sachin Tyagi(B11030)
programmer2:Sahil Mutneja(B11031)
purpose: Using genetic algorithm to find the solution of tsp problem
***************************************************************************/

#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#define INFI 5.0/0.0

/*************greedy*****************/
void euclidean(int cities,float dist_matrix[][cities],int best_path[])
{
  int start=0,curr=0,prev,counter=0;
  int closed[cities];
  int i,j,index;
  float min=INFI;
  /***set all the elements of closed list to ****/
  for(i=0;i<cities;i++)
    closed[i]=0;

  /******finding the path*****/
  //  printf("%d ",start+1);
  closed[start]=1;
  best_path[counter]=start;
  counter++;
  curr=start;
  prev=start;
  /****loop invariant while there is no city left to go from current city
       prev=curr-------------prev is storing the previously visited city******/
  do
    {
      for(j=0;j<cities;j++)
	{
	  if(closed[j]==0)
	    {
	      if(dist_matrix[curr][j]!=0 && dist_matrix[curr][j]<min)
		{
		  min=dist_matrix[curr][j];
		  index=j;
		}
	    }
	}
      prev=curr;
      curr=index;
      closed[curr]=1;
      if(prev!=curr)
	{
	  best_path[counter]=index;
	  counter++;
	}
      min=INFI;
    }while(curr!=prev);

}



/**********generate random tours**************/
generate_rand_tour(int max,int cities,int tours[][cities])
{
  int count=0,i=0,j=0;
  int closed[cities];
  time_t t;
  int rand_n=0,total_tours=0;
   

  while(total_tours<max)
    {
      for(i=0;i<cities;i++)
	closed[i]=0;
      while(count<cities)
	{
	  rand_n=rand()%cities;
	  if(closed[rand_n]==0)
	    {
	      closed[rand_n]=1;
	      tours[total_tours][count]=rand_n;
	      count++;
	    }
	}
      count=0;
      total_tours+=1;
    }
 }


/*****************order crossover operator***************/
crossover(int parent1[],int parent2[],int cities,int child1[],int child2[],int *mrate)
{

  int i=0,j=0,start=0,end=0,mid=0,move=0;
  int closed1[cities];
  int closed2[cities];
  time_t t;

  for(i=0;i<cities;i++)
    {
      child1[i]=parent1[i];
      child2[i]=parent2[i];
      closed1[i]=0;
      closed2[i]=0;
    }

  start=rand()%(cities-1)/2+1;
  end=start+(cities-1)/2-1;

  for(i=start;i<=end;i++)
    {
      closed1[child1[i]]=1;
      closed2[child2[i]]=1;
    }
  /*****************producing child1 from parents*************/
  j=0;
  int index1=0,temp=0,index2=0;
  for(i=0;i<cities;i++)
    {
      if(closed1[parent2[i]]==0)
	{
	  if((j<start || j>end)&&j<cities)
	    {
	      child1[j]=parent2[i];
	      closed1[parent2[i]]=1;
	      j++;
	    }
	  if(j>=start && j<=end)
	      j=end+1;
	}
    }
  int rate=0;
  //mrate represents mutation rate
  /******mutation of child 1********/
  if(*mrate>6)
    *mrate=1;
  while(rate<*mrate)
    {
      index1=rand()%cities;
      index2=rand()%cities;
      
      temp=child1[index1];
      child1[index1]=child1[index2];
      child1[index2]=temp;
      rate++;
    }
  /************************************/
  /**************producing child2 from parents**************/
  j=0;
  for(i=0;i<cities;i++)
    {
      if(closed2[parent1[i]]==0)
	{
	  if((j<start || j>end)&&j<cities)
	    {
	      child2[j]=parent1[i];
	      closed2[parent1[i]]=1;
	      j++;
	    }
	  if(j>=start && j<=end)
	      j=end+1;
	}
    }
  /****************mutation of child 2***************/
  rate=0;
  while(rate<*mrate)
    {
      index1=rand()%cities;
      index2=rand()%cities;
      
      temp=child2[index1];
      child2[index1]=child2[index2];
      child2[index2]=temp;
      rate++;
    }
  /****************************************************/

}

/*********sorting- using quick sort*********************/
quicksort(float arr[],int first,int last,int point[])
{
  if(first<last)
    {
      int i=first,j=last,pivot=first,temp1;
      float temp;
      while(i<j)
	{
	  while(arr[i]<=arr[pivot] && i<last)
	    i++;
	  while(arr[j]>arr[pivot])
	    j--;
	  if(i<j)
	    {
	      temp=arr[i];
	      temp1=point[i];
	      arr[i]=arr[j];
	      point[i]=point[j];
	      arr[j]=temp;
	      point[j]=temp1;
	    }
	}
      temp=arr[pivot];
      temp1=point[pivot];
      arr[pivot]=arr[j];
      point[pivot]=point[j];
      arr[j]=temp;
      point[j]=temp1;
      quicksort(arr,first,j-1,point);
      quicksort(arr,j+1,last,point);
    }	    
}

void genetic(int cities,float dist_matrix[][cities])
{
  int t=500;//number of starting randomly generated population

  int tours[t][cities];//matrix to store the tours
  //fitness matrix stores the fitness of a corresponding path
  float fitness[t],max_in_fitness=0,best_fitness=INFI,curr_fitness=0;
  int total_tours=0,count=0,i=0;
  int best_path[cities];
  int k=0;
  
  generate_rand_tour(t,cities,tours);//generate random tours
  /************fitness for all the randomly generated path**************/
  euclidean(cities,dist_matrix,best_path);
  for(k=0;k<cities-1;k++)
    curr_fitness+=dist_matrix[best_path[k]][best_path[k+1]];
  curr_fitness+=dist_matrix[best_path[cities-1]][best_path[0]];
  

  for(i=0;i<t;i++)
    fitness[i]=0;
  //calculating fitness of the candidate solutions
  for(total_tours=0;total_tours<t;total_tours++)
    {
      for(count=0;count<cities-1;count++)
	fitness[total_tours]+=dist_matrix[tours[total_tours][count]][tours[total_tours][count+1]];
      fitness[total_tours]+=dist_matrix[tours[total_tours][cities-1]][tours[total_tours][0]];
    }
    for(i=0;i<t;i++)
    {
      if(fitness[i]>curr_fitness)
	{
	  for(k=0;k<cities;k++)
	    tours[i][k]=best_path[k];
	  fitness[i]=curr_fitness;
	  break;
	}
    }

  
  
  int generations=0,j=0;
  int child[t/2][cities];
  int parent_point[t];
  int child_point[t/2];
  float fitness_child[t/2];//matrix to store the child fitness
  int mrate=1,iterations=0;
  for(j=0;j<t;j++)
    parent_point[j]=j;
  
  
  while(1)
    {
  
      quicksort(fitness,0,t-1,parent_point);//sorting the parent matrix
  
      for(j=0;j<t/2;j++)
	child_point[j]=j;
      for(j=0;j<t/2;j+=2)
	{
	  //using crossover to generate children
	  crossover(tours[parent_point[j]],tours[parent_point[j+1]],cities,child[j],child[j+1],&mrate);
	}

      //fitness for child
      for(j=0;j<t/2;j++)
	fitness_child[j]=0;
      for(total_tours=0;total_tours<t/2;total_tours++)
	{
	  for(count=0;count<cities-1;count++)
	    fitness_child[total_tours]+=dist_matrix[child[total_tours][count]][child[total_tours][count+1]];
	  fitness_child[total_tours]+=dist_matrix[child[total_tours][cities-1]][child[total_tours][0]];
	}
      //sort the child array
      quicksort(fitness_child,0,(t/2)-1,child_point);
	


  
      //replacing the worst populations of previous generation
      count=0;
      for(i=t-1;i>0;i--)
	  {
	    if(count<t/2)
	      {

		if(fitness[i]>fitness_child[count])
		  {
		    for(j=0;j<cities;j++)
		      tours[parent_point[i]][j]=child[child_point[count]][j];

		    fitness[i]=fitness_child[count];
		    count++;
		  }
		else
		  break;
	      }
	    else
	      break;
	  }
      //finding the minimum path among the parent and children
      float min=0;
      int index=0;
      if(fitness[0]<fitness[t-1])
	{
	  min=fitness[0];
	  index=parent_point[0];		
	}
      else
	{
	  min=fitness[t-1];
	  index=parent_point[t-1];
	}
      //if this path is better than the bestpath then it will be the new bestpath
      if(best_fitness>min)
	{
	  iterations=0;
	  best_fitness=min;
	  for(i=0;i<cities;i++)
	    {
	      printf("%d ",tours[index][i]+1);
	      best_path[i]=tours[index][i];
	    }
	}
      else if(min==best_fitness)
	{
	  if(iterations>=20)
	    {
	      mrate+=1;
	      iterations=0;
	    }
	  best_fitness=min;
	  for(i=0;i<cities;i++)
	    {
	      printf("%d ",tours[parent_point[0]][i]+1);
	      best_path[i]=tours[parent_point[0]][i];
	    }
	}
      else
	{
	  iterations=0;
	  for(i=0;i<cities;i++)
	    printf("%d ",best_path[i]+1);
	}    
      //printf("%d ",best_path[0]+1);
      iterations+=1;
      printf("\n");
      }
}



int main()
{
  /****Euclidean or non euclidean***/
  char choice[15];
  time_t t;
  srand((unsigned) time(&t));
  choice[sizeof(choice)-1]=~'\0';
  fgets(choice,sizeof(choice),stdin);

  int cities=0,i,j;
  scanf("%d",&cities);

  float coordinates[cities][2];
  for(i=0;i<cities;i++)
    {
      for(j=0;j<2;j++)
	scanf("%f",&coordinates[i][j]);
    }

  float dist_matrix[cities][cities];
  for(i=0;i<cities;i++)
    {
      for(j=0;j<cities;j++)
	scanf("%f",&dist_matrix[i][j]);
    }
    
    genetic(cities,dist_matrix);
}
